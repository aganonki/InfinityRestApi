// <auto-generated />
using System;
using InfinityRest.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InfinityRest.Data.Migrations
{
    [DbContext(typeof(InfinityDB))]
    [Migration("20190128100923_InfinityDB_v1.0.1")]
    partial class InfinityDB_v101
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InfinityRest.Data.Data.ProcessState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.ToTable("ProcessStates");

                    b.HasData(
                        new { Id = 0, State = "Waiting" },
                        new { Id = 10, State = "Processing" },
                        new { Id = 100, State = "Complete" }
                    );
                });

            modelBuilder.Entity("InfinityRest.Data.Data.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("Runs");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 1, 28, 0, 0, 0, 0, DateTimeKind.Local), Priority = 100 }
                    );
                });

            modelBuilder.Entity("InfinityRest.Data.Data.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProcessStateId");

                    b.Property<int>("RunId");

                    b.Property<int?>("TaskSettingsId");

                    b.Property<int>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProcessStateId");

                    b.HasIndex("RunId");

                    b.HasIndex("TaskSettingsId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new { Id = 1, Name = "mockTest", ProcessStateId = 10, RunId = 1, TaskTypeId = 1 }
                    );
                });

            modelBuilder.Entity("InfinityRest.Data.Data.TaskRunType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskRunTypes");

                    b.HasData(
                        new { Id = 1, Name = "Parallel" },
                        new { Id = 2, Name = "Sync" },
                        new { Id = 3, Name = "Default" }
                    );
                });

            modelBuilder.Entity("InfinityRest.Data.Data.TaskSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ExampleBool");

                    b.Property<string>("FolderName");

                    b.Property<int>("Integer");

                    b.Property<int?>("RunTypeId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("RunTypeId");

                    b.ToTable("TaskSettings");
                });

            modelBuilder.Entity("InfinityRest.Data.Data.TaskType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new { Id = 1, Name = "Formatting" },
                        new { Id = 2, Name = "Moving" }
                    );
                });

            modelBuilder.Entity("InfinityRest.Data.Data.Task", b =>
                {
                    b.HasOne("InfinityRest.Data.Data.ProcessState", "ProcessStateLink")
                        .WithMany()
                        .HasForeignKey("ProcessStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InfinityRest.Data.Data.Run")
                        .WithMany("Tasks")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InfinityRest.Data.Data.TaskSettings", "TaskSettings")
                        .WithMany()
                        .HasForeignKey("TaskSettingsId");

                    b.HasOne("InfinityRest.Data.Data.TaskType", "TaskTypeLink")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InfinityRest.Data.Data.TaskSettings", b =>
                {
                    b.HasOne("InfinityRest.Data.Data.TaskRunType", "RunType")
                        .WithMany()
                        .HasForeignKey("RunTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
